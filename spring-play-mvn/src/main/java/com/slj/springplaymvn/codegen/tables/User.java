/*
 * This file is generated by jOOQ.
 */
package com.slj.springplaymvn.codegen.tables;


import com.slj.springplaymvn.codegen.Keys;
import com.slj.springplaymvn.codegen.SpringPlay;
import com.slj.springplaymvn.codegen.tables.records.UserRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 用户信息表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class User extends TableImpl<UserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>spring_play.user</code>
     */
    public static final User USER = new User();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserRecord> getRecordType() {
        return UserRecord.class;
    }

    /**
     * The column <code>spring_play.user.id</code>.
     */
    public final TableField<UserRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>spring_play.user.account</code>. 用户账户名
     */
    public final TableField<UserRecord, String> ACCOUNT = createField(DSL.name("account"), SQLDataType.VARCHAR(100).nullable(false), this, "用户账户名");

    /**
     * The column <code>spring_play.user.password</code>. 用户密码
     */
    public final TableField<UserRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(100).nullable(false), this, "用户密码");

    /**
     * The column <code>spring_play.user.creator_id</code>. 创建人id
     */
    public final TableField<UserRecord, Long> CREATOR_ID = createField(DSL.name("creator_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "创建人id");

    /**
     * The column <code>spring_play.user.creator_name</code>. 创建人名称
     */
    public final TableField<UserRecord, String> CREATOR_NAME = createField(DSL.name("creator_name"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("0", SQLDataType.VARCHAR)), this, "创建人名称");

    /**
     * The column <code>spring_play.user.create_time</code>. 创建时间
     */
    public final TableField<UserRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>spring_play.user.update_user_id</code>. 更新人id
     */
    public final TableField<UserRecord, Long> UPDATE_USER_ID = createField(DSL.name("update_user_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "更新人id");

    /**
     * The column <code>spring_play.user.update_user_name</code>. 更新人名称
     */
    public final TableField<UserRecord, String> UPDATE_USER_NAME = createField(DSL.name("update_user_name"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("0", SQLDataType.VARCHAR)), this, "更新人名称");

    /**
     * The column <code>spring_play.user.update_time</code>. 更新时间
     */
    public final TableField<UserRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "更新时间");

    private User(Name alias, Table<UserRecord> aliased) {
        this(alias, aliased, null);
    }

    private User(Name alias, Table<UserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("用户信息表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>spring_play.user</code> table reference
     */
    public User(String alias) {
        this(DSL.name(alias), USER);
    }

    /**
     * Create an aliased <code>spring_play.user</code> table reference
     */
    public User(Name alias) {
        this(alias, USER);
    }

    /**
     * Create a <code>spring_play.user</code> table reference
     */
    public User() {
        this(DSL.name("user"), null);
    }

    public <O extends Record> User(Table<O> child, ForeignKey<O, UserRecord> key) {
        super(child, key, USER);
    }

    @Override
    public Schema getSchema() {
        return SpringPlay.SPRING_PLAY;
    }

    @Override
    public UniqueKey<UserRecord> getPrimaryKey() {
        return Keys.KEY_USER_PRIMARY;
    }

    @Override
    public List<UniqueKey<UserRecord>> getKeys() {
        return Arrays.<UniqueKey<UserRecord>>asList(Keys.KEY_USER_PRIMARY);
    }

    @Override
    public User as(String alias) {
        return new User(DSL.name(alias), this);
    }

    @Override
    public User as(Name alias) {
        return new User(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public User rename(String name) {
        return new User(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public User rename(Name name) {
        return new User(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, String, String, Long, String, LocalDateTime, Long, String, LocalDateTime> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
